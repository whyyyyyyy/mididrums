#include <MIDI.h>
#define HIT_BUFFER_SIZE 80
#define PEAK_BUFFER_SIZE 10


MIDI_CREATE_DEFAULT_INSTANCE();

int pinRead;

const int pads = 8;

//multiplexer settings
int r0 = 0;
int r1 = 0;
int r2 = 0;
int s0 = 2;
int s1 = 3;
int s2 = 4;
int ANALOG_PIN = A0;
int buf[8];
int count = 0;
//mx set end

unsigned short padNote[pads] = {48, 38, 43, 36, 49, 42, 46, 51};
unsigned short thresholdPads[pads] = {50, 50, 50, 50, 50, 50, 50, 50};
unsigned short signalBuffer[pads][HIT_BUFFER_SIZE];
unsigned short peakBuffer[pads][PEAK_BUFFER_SIZE];
boolean activePad[pads] = {0, 0, 0, 0, 0, 0, 0, 0};
unsigned short hitavg = 0;
unsigned short signalPos[pads];
unsigned short startReadingHit[pads];
unsigned short peakPos[pads];
unsigned short startReadingPeak[pads];
bool lastPeakZeroed[pads];
unsigned long lastPeakTime[pads];
unsigned long lastHitTime[pads];
unsigned short timeBetweenPeaks = 20;
unsigned short timeBetweenHits = 100;

bool hitReady[pads];
unsigned short hitReadyVelocity[pads];

void setup() {
  // put your setup code here, to run once:
  //Serial.begin(9600);
  pinMode(s0, OUTPUT);
  pinMode(s1, OUTPUT);
  pinMode(s2, OUTPUT);
  for (int i = 0; i < pads; i++)
  {
    lastPeakZeroed[i] = false;
    signalPos[i] = 0;
    peakPos[i] = 0;
    hitReady[i] = false;
    hitReadyVelocity[pads] = 0;
    lastHitTime[pads] = 0;
    lastPeakTime[pads] = 0;
    peakPos[pads] = 0;
    signalPos[pads] = 0;
    memset(signalBuffer[i], 0, sizeof(signalBuffer[i]));
    memset(peakBuffer[i], 0, sizeof(peakBuffer[i]));
  }
  MIDI.begin(MIDI_CHANNEL_OMNI);
}

void loop() {
  // put your main code here, to run repeatedly:
  hitavg = 0;
  getAnalogData();
  unsigned long currentTime = millis();

  for (int pin = 0; pin < pads; pin++)
  {
    hitavg = buf[pin];
    signalBuffer[pin][signalPos[pin]] = hitavg;
    if (hitavg < thresholdPads[pin])
    {
      if (!lastPeakZeroed && (currentTime - lastPeakTime[pin]) > timeBetweenPeaks )
      {
        recordPeak(pin, 0);
      }
      else
      {
        //get prev signal:
        short prevSignalPos = signalPos[pin] - 1;
        if (prevSignalPos < 0) prevSignalPos = HIT_BUFFER_SIZE - 1;
        unsigned short prevSignal = signalBuffer[pin][prevSignalPos];

        //get new peak:
        unsigned short newPeak = 0;
        while (prevSignal >= thresholdPads[pin])
        {
          
          if (prevSignal > newPeak) newPeak = prevSignal;

          prevSignalPos--;
          if (prevSignalPos < 0) prevSignalPos = HIT_BUFFER_SIZE - 1;
          prevSignal = signalBuffer[pin][prevSignalPos];
        }
        
        if (newPeak > 0)
        {
          
          recordPeak(pin, newPeak);
        }

      }
    }

    signalPos[pin]++;
    if (signalPos[pin] == HIT_BUFFER_SIZE) signalPos[pin] = 0;
  }
}

void recordPeak(short pin, short peak)
{
  if (peak == 0) lastPeakZeroed[pin] = true;
  else lastPeakZeroed[pin] = false;

  unsigned long currentTime = millis();
  lastPeakTime[pin] = currentTime;

  peakBuffer[pin][peakPos[pin]] = peak;

  //get prev peak:
  short prevPeakPos = peakPos[pin] - 1;
  if (prevPeakPos < 0) prevPeakPos = PEAK_BUFFER_SIZE - 1;
  unsigned short prevPeak = peakBuffer[pin][prevPeakPos];

  if(peak>prevPeak && (currentTime-lastHitTime[pin])>timeBetweenHits )
  {
    hitReady[pin] = true;
    if(peak>hitReadyVelocity[pin])
    {
      hitReadyVelocity[pin] = peak;
    }
  }
  else if(peak<prevPeak && hitReady[pin])
  {
    hitReadyVelocity[pin] = hitReadyVelocity[pin]*.65;
    if(hitReadyVelocity[pin]>=127) hitReadyVelocity[pin] = 126;
    /*Serial.print("HIT:");
    Serial.print(hitReadyVelocity[pin]);
    Serial.println();*/
    MIDI.sendNoteOn(padNote[pin],hitReadyVelocity[pin],1);
    MIDI.sendNoteOff(padNote[pin],0,1);
    hitReady[pin] = false;
    hitReadyVelocity[pin] = 0;
    lastHitTime[pin] = currentTime;
  }

  peakPos[pin]++;
  if (peakPos[pin] == PEAK_BUFFER_SIZE) peakPos[pin] = 0;
}

void getAnalogData()
{
  for (count = 0; count < 8; count++)
  {
    r0 = count & 0x01;
    r1 = (count >> 1) & 0x01;
    r2 = (count >> 2) & 0x01;

    digitalWrite(s0, r0);
    digitalWrite(s1, r1);
    digitalWrite(s2, r2);

    buf[count] = analogRead(ANALOG_PIN);
  }
}

/*
   у нас есть по 2 массива для каэжого пина, в первый постоянно считываем значения hitavg, а в другой считываем изменения значений,
   если в первый массив поступило подрят несколько значений отличных от нуля, то выбираем максимальное, и записываем во второй массив
   далее следущее !ОДНО нулевое значение, также записываем во второй массив

 * */

